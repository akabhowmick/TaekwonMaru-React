{
  "version": 3,
  "sources": ["../../loadable-image/dist/index.esm.js", "../../src/InView.tsx", "../../src/observe.ts", "../../src/useInView.tsx"],
  "sourcesContent": ["import{jsx as e,Fragment as r,jsxs as t}from\"react/jsx-runtime\";import{InView as o}from\"react-intersection-observer\";import{forwardRef as n,useState as i,cloneElement as s}from\"react\";import{Fade as a}from\"transitions-kit\";function c(e,r){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&r.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&\"function\"==typeof Object.getOwnPropertySymbols){var n=0;for(o=Object.getOwnPropertySymbols(e);n<o.length;n++)r.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(e,o[n])&&(t[o[n]]=e[o[n]])}return t}\"function\"==typeof SuppressedError&&SuppressedError;const l=n(((r,t)=>{var{style:o}=r,n=c(r,[\"style\"]);return e(\"div\",Object.assign({ref:t},n,{className:`AsyncImage-root ${n.className}`.trim(),style:Object.assign(Object.assign({},o),{display:\"flex\",overflow:\"hidden\",backgroundRepeat:\"no-repeat\",boxSizing:\"border-box\",backgroundSize:\"cover\",position:\"relative\"})}))})),u={top:0,left:0,width:\"100%\",height:\"100%\",position:\"absolute\",boxSizing:\"border-box\"},d=e(\"div\",{className:\"AsyncImage-loader\",style:{backgroundColor:\"#eee\"}}),b=e(\"div\",{className:\"Asyncimage-error\",style:{backgroundColor:\"#eee\"},children:e(\"svg\",{fill:\"#00000061\",viewBox:\"0 0 24 24\",style:{position:\"absolute\",inset:0,width:\"50%\",height:\"50%\",margin:\"auto\"},children:e(\"path\",{d:\"M21 5c0-1.1-.9-2-2-2H5.83L21 18.17V5zM2.81 2.81 1.39 4.22 3 5.83V19c0 1.1.9 2 2 2h13.17l1.61 1.61 1.41-1.41L2.81 2.81zM6 17l3-4 2.25 3 .82-1.1 2.1 2.1H6z\"})})});var p;!function(e){e[e.LOADING=0]=\"LOADING\",e[e.LOADED=1]=\"LOADED\",e[e.FAILED=2]=\"FAILED\"}(p||(p={}));const g=({sources:t=[]})=>t.length?e(r,{children:t.map((r=>{return e(\"source\",Object.assign({},r),null!==(o=(t=r).src)&&void 0!==o?o:t.srcSet);var t,o}))}):null,m=o=>{var{error:n,loader:l,onLoad:d,onError:b,objectFit:m=\"cover\",Transition:O=a,sources:y=[],inView:j}=o,f=c(o,[\"error\",\"loader\",\"onLoad\",\"onError\",\"objectFit\",\"Transition\",\"sources\",\"inView\"]);const[h,v]=i(p.LOADING);return t(r,{children:[e(a,{appear:!1,in:h===p.LOADING,timeout:1e3,unmountOnExit:!0,children:s(l,{style:Object.assign(Object.assign({},l.props.style),u)})}),j&&e(O,{in:h===p.LOADED,timeout:1e3,children:t(\"picture\",{style:u,children:[e(g,{sources:y}),e(\"img\",Object.assign({},f,{className:\"AsyncImage-image\",style:Object.assign({objectFit:m},u),onLoad:e=>{v(p.LOADED),null==d||d(e)},onError:e=>{v(p.FAILED),null==b||b(e)}}))]})}),e(a,{in:h===p.FAILED,timeout:1e3,mountOnEnter:!0,unmountOnExit:!0,children:s(n,{style:Object.assign(Object.assign({},n.props.style),u)})})]})},O=r=>{var{loader:t=d,error:n=b,rootMargin:i=\"600px 0px\",objectFit:s=\"cover\",style:a={},className:u=\"\"}=r,p=c(r,[\"loader\",\"error\",\"rootMargin\",\"objectFit\",\"style\",\"className\"]);return e(o,{rootMargin:i,triggerOnce:!0,children:({ref:r,inView:o})=>{var i;return e(l,{ref:r,className:u,style:a,children:e(m,Object.assign({error:n,loader:t,objectFit:null!==(i=a.objectFit)&&void 0!==i?i:s,inView:o},p))})}})};export{O as AsyncImage};\n", "import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n", "import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n", "import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["e", "r", "t", "n", "n", "r", "t", "e", "l", "d", "b", "m", "O", "i", "s", "u", "p"]
}
